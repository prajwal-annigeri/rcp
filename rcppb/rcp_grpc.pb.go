// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: rcppb/rcp.proto

package rcppb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RCPClient is the client API for RCP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RCPClient interface {
	AppendEntries(ctx context.Context, in *AppendEntriesReq, opts ...grpc.CallOption) (*AppendEntriesResponse, error)
	RequestVote(ctx context.Context, in *RequestVoteReq, opts ...grpc.CallOption) (*RequestVoteResponse, error)
	// rpc Store(StoreRequest) returns (google.protobuf.BoolValue) {}
	// rpc Delete(DeleteReq) returns (google.protobuf.BoolValue) {}
	// rpc Get(GetValueReq) returns (GetValueResponse) {}
	SetStatus(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	// rpc Partition(PartitionReq) returns (google.protobuf.BoolValue) {}
	// rpc Delay(DelayRequest) returns (google.protobuf.BoolValue) {}
	Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	CauseFailure(ctx context.Context, in *CauseFailureRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
}

type rCPClient struct {
	cc grpc.ClientConnInterface
}

func NewRCPClient(cc grpc.ClientConnInterface) RCPClient {
	return &rCPClient{cc}
}

func (c *rCPClient) AppendEntries(ctx context.Context, in *AppendEntriesReq, opts ...grpc.CallOption) (*AppendEntriesResponse, error) {
	out := new(AppendEntriesResponse)
	err := c.cc.Invoke(ctx, "/rcppb.RCP/AppendEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCPClient) RequestVote(ctx context.Context, in *RequestVoteReq, opts ...grpc.CallOption) (*RequestVoteResponse, error) {
	out := new(RequestVoteResponse)
	err := c.cc.Invoke(ctx, "/rcppb.RCP/RequestVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCPClient) SetStatus(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/rcppb.RCP/SetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCPClient) Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/rcppb.RCP/Healthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCPClient) CauseFailure(ctx context.Context, in *CauseFailureRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/rcppb.RCP/CauseFailure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RCPServer is the server API for RCP service.
// All implementations must embed UnimplementedRCPServer
// for forward compatibility
type RCPServer interface {
	AppendEntries(context.Context, *AppendEntriesReq) (*AppendEntriesResponse, error)
	RequestVote(context.Context, *RequestVoteReq) (*RequestVoteResponse, error)
	// rpc Store(StoreRequest) returns (google.protobuf.BoolValue) {}
	// rpc Delete(DeleteReq) returns (google.protobuf.BoolValue) {}
	// rpc Get(GetValueReq) returns (GetValueResponse) {}
	SetStatus(context.Context, *wrapperspb.BoolValue) (*wrapperspb.BoolValue, error)
	// rpc Partition(PartitionReq) returns (google.protobuf.BoolValue) {}
	// rpc Delay(DelayRequest) returns (google.protobuf.BoolValue) {}
	Healthz(context.Context, *HealthzRequest) (*wrapperspb.BoolValue, error)
	CauseFailure(context.Context, *CauseFailureRequest) (*wrapperspb.BoolValue, error)
	mustEmbedUnimplementedRCPServer()
}

// UnimplementedRCPServer must be embedded to have forward compatible implementations.
type UnimplementedRCPServer struct {
}

func (UnimplementedRCPServer) AppendEntries(context.Context, *AppendEntriesReq) (*AppendEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntries not implemented")
}
func (UnimplementedRCPServer) RequestVote(context.Context, *RequestVoteReq) (*RequestVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVote not implemented")
}
func (UnimplementedRCPServer) SetStatus(context.Context, *wrapperspb.BoolValue) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStatus not implemented")
}
func (UnimplementedRCPServer) Healthz(context.Context, *HealthzRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (UnimplementedRCPServer) CauseFailure(context.Context, *CauseFailureRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CauseFailure not implemented")
}
func (UnimplementedRCPServer) mustEmbedUnimplementedRCPServer() {}

// UnsafeRCPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RCPServer will
// result in compilation errors.
type UnsafeRCPServer interface {
	mustEmbedUnimplementedRCPServer()
}

func RegisterRCPServer(s grpc.ServiceRegistrar, srv RCPServer) {
	s.RegisterService(&RCP_ServiceDesc, srv)
}

func _RCP_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCPServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rcppb.RCP/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCPServer).AppendEntries(ctx, req.(*AppendEntriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCP_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCPServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rcppb.RCP/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCPServer).RequestVote(ctx, req.(*RequestVoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCP_SetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.BoolValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCPServer).SetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rcppb.RCP/SetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCPServer).SetStatus(ctx, req.(*wrapperspb.BoolValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCP_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCPServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rcppb.RCP/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCPServer).Healthz(ctx, req.(*HealthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCP_CauseFailure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CauseFailureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCPServer).CauseFailure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rcppb.RCP/CauseFailure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCPServer).CauseFailure(ctx, req.(*CauseFailureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RCP_ServiceDesc is the grpc.ServiceDesc for RCP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RCP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rcppb.RCP",
	HandlerType: (*RCPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendEntries",
			Handler:    _RCP_AppendEntries_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _RCP_RequestVote_Handler,
		},
		{
			MethodName: "SetStatus",
			Handler:    _RCP_SetStatus_Handler,
		},
		{
			MethodName: "Healthz",
			Handler:    _RCP_Healthz_Handler,
		},
		{
			MethodName: "CauseFailure",
			Handler:    _RCP_CauseFailure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rcppb/rcp.proto",
}
