// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: rcppb/rcp.proto

package rcppb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RCP_AppendEntries_FullMethodName   = "/rcppb.RCP/AppendEntries"
	RCP_RequestVote_FullMethodName     = "/rcppb.RCP/RequestVote"
	RCP_Store_FullMethodName           = "/rcppb.RCP/Store"
	RCP_Delete_FullMethodName          = "/rcppb.RCP/Delete"
	RCP_Get_FullMethodName             = "/rcppb.RCP/Get"
	RCP_SetStatus_FullMethodName       = "/rcppb.RCP/SetStatus"
	RCP_Partition_FullMethodName       = "/rcppb.RCP/Partition"
	RCP_Delay_FullMethodName           = "/rcppb.RCP/Delay"
	RCP_DepositChecking_FullMethodName = "/rcppb.RCP/DepositChecking"
	RCP_SendPayment_FullMethodName     = "/rcppb.RCP/SendPayment"
	RCP_WriteCheck_FullMethodName      = "/rcppb.RCP/WriteCheck"
	RCP_GetBalance_FullMethodName      = "/rcppb.RCP/GetBalance"
	RCP_Amalgamate_FullMethodName      = "/rcppb.RCP/Amalgamate"
	RCP_TransactSavings_FullMethodName = "/rcppb.RCP/TransactSavings"
)

// RCPClient is the client API for RCP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RCPClient interface {
	AppendEntries(ctx context.Context, in *AppendEntriesReq, opts ...grpc.CallOption) (*AppendEntriesResponse, error)
	RequestVote(ctx context.Context, in *RequestVoteReq, opts ...grpc.CallOption) (*RequestVoteResponse, error)
	Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	Get(ctx context.Context, in *GetValueReq, opts ...grpc.CallOption) (*GetValueResponse, error)
	SetStatus(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	Partition(ctx context.Context, in *PartitionReq, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	Delay(ctx context.Context, in *DelayRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	DepositChecking(ctx context.Context, in *DepositCheckingRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	SendPayment(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	WriteCheck(ctx context.Context, in *WriteCheckRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	Amalgamate(ctx context.Context, in *AmalgamateRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	TransactSavings(ctx context.Context, in *TransactSavingsRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
}

type rCPClient struct {
	cc grpc.ClientConnInterface
}

func NewRCPClient(cc grpc.ClientConnInterface) RCPClient {
	return &rCPClient{cc}
}

func (c *rCPClient) AppendEntries(ctx context.Context, in *AppendEntriesReq, opts ...grpc.CallOption) (*AppendEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppendEntriesResponse)
	err := c.cc.Invoke(ctx, RCP_AppendEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCPClient) RequestVote(ctx context.Context, in *RequestVoteReq, opts ...grpc.CallOption) (*RequestVoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestVoteResponse)
	err := c.cc.Invoke(ctx, RCP_RequestVote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCPClient) Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, RCP_Store_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCPClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, RCP_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCPClient) Get(ctx context.Context, in *GetValueReq, opts ...grpc.CallOption) (*GetValueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetValueResponse)
	err := c.cc.Invoke(ctx, RCP_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCPClient) SetStatus(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, RCP_SetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCPClient) Partition(ctx context.Context, in *PartitionReq, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, RCP_Partition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCPClient) Delay(ctx context.Context, in *DelayRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, RCP_Delay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCPClient) DepositChecking(ctx context.Context, in *DepositCheckingRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, RCP_DepositChecking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCPClient) SendPayment(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, RCP_SendPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCPClient) WriteCheck(ctx context.Context, in *WriteCheckRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, RCP_WriteCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCPClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, RCP_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCPClient) Amalgamate(ctx context.Context, in *AmalgamateRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, RCP_Amalgamate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCPClient) TransactSavings(ctx context.Context, in *TransactSavingsRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, RCP_TransactSavings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RCPServer is the server API for RCP service.
// All implementations must embed UnimplementedRCPServer
// for forward compatibility.
type RCPServer interface {
	AppendEntries(context.Context, *AppendEntriesReq) (*AppendEntriesResponse, error)
	RequestVote(context.Context, *RequestVoteReq) (*RequestVoteResponse, error)
	Store(context.Context, *StoreRequest) (*wrapperspb.BoolValue, error)
	Delete(context.Context, *DeleteReq) (*wrapperspb.BoolValue, error)
	Get(context.Context, *GetValueReq) (*GetValueResponse, error)
	SetStatus(context.Context, *wrapperspb.BoolValue) (*wrapperspb.BoolValue, error)
	Partition(context.Context, *PartitionReq) (*wrapperspb.BoolValue, error)
	Delay(context.Context, *DelayRequest) (*wrapperspb.BoolValue, error)
	DepositChecking(context.Context, *DepositCheckingRequest) (*wrapperspb.BoolValue, error)
	SendPayment(context.Context, *SendPaymentRequest) (*wrapperspb.BoolValue, error)
	WriteCheck(context.Context, *WriteCheckRequest) (*wrapperspb.BoolValue, error)
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	Amalgamate(context.Context, *AmalgamateRequest) (*wrapperspb.BoolValue, error)
	TransactSavings(context.Context, *TransactSavingsRequest) (*wrapperspb.BoolValue, error)
	mustEmbedUnimplementedRCPServer()
}

// UnimplementedRCPServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRCPServer struct{}

func (UnimplementedRCPServer) AppendEntries(context.Context, *AppendEntriesReq) (*AppendEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntries not implemented")
}
func (UnimplementedRCPServer) RequestVote(context.Context, *RequestVoteReq) (*RequestVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVote not implemented")
}
func (UnimplementedRCPServer) Store(context.Context, *StoreRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedRCPServer) Delete(context.Context, *DeleteReq) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRCPServer) Get(context.Context, *GetValueReq) (*GetValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRCPServer) SetStatus(context.Context, *wrapperspb.BoolValue) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStatus not implemented")
}
func (UnimplementedRCPServer) Partition(context.Context, *PartitionReq) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Partition not implemented")
}
func (UnimplementedRCPServer) Delay(context.Context, *DelayRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delay not implemented")
}
func (UnimplementedRCPServer) DepositChecking(context.Context, *DepositCheckingRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositChecking not implemented")
}
func (UnimplementedRCPServer) SendPayment(context.Context, *SendPaymentRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPayment not implemented")
}
func (UnimplementedRCPServer) WriteCheck(context.Context, *WriteCheckRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteCheck not implemented")
}
func (UnimplementedRCPServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedRCPServer) Amalgamate(context.Context, *AmalgamateRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Amalgamate not implemented")
}
func (UnimplementedRCPServer) TransactSavings(context.Context, *TransactSavingsRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactSavings not implemented")
}
func (UnimplementedRCPServer) mustEmbedUnimplementedRCPServer() {}
func (UnimplementedRCPServer) testEmbeddedByValue()             {}

// UnsafeRCPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RCPServer will
// result in compilation errors.
type UnsafeRCPServer interface {
	mustEmbedUnimplementedRCPServer()
}

func RegisterRCPServer(s grpc.ServiceRegistrar, srv RCPServer) {
	// If the following call pancis, it indicates UnimplementedRCPServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RCP_ServiceDesc, srv)
}

func _RCP_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCPServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RCP_AppendEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCPServer).AppendEntries(ctx, req.(*AppendEntriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCP_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCPServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RCP_RequestVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCPServer).RequestVote(ctx, req.(*RequestVoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCP_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCPServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RCP_Store_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCPServer).Store(ctx, req.(*StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCP_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCPServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RCP_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCPServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCP_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCPServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RCP_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCPServer).Get(ctx, req.(*GetValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCP_SetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.BoolValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCPServer).SetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RCP_SetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCPServer).SetStatus(ctx, req.(*wrapperspb.BoolValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCP_Partition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCPServer).Partition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RCP_Partition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCPServer).Partition(ctx, req.(*PartitionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCP_Delay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCPServer).Delay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RCP_Delay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCPServer).Delay(ctx, req.(*DelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCP_DepositChecking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositCheckingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCPServer).DepositChecking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RCP_DepositChecking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCPServer).DepositChecking(ctx, req.(*DepositCheckingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCP_SendPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCPServer).SendPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RCP_SendPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCPServer).SendPayment(ctx, req.(*SendPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCP_WriteCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCPServer).WriteCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RCP_WriteCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCPServer).WriteCheck(ctx, req.(*WriteCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCP_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCPServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RCP_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCPServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCP_Amalgamate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AmalgamateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCPServer).Amalgamate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RCP_Amalgamate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCPServer).Amalgamate(ctx, req.(*AmalgamateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCP_TransactSavings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactSavingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCPServer).TransactSavings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RCP_TransactSavings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCPServer).TransactSavings(ctx, req.(*TransactSavingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RCP_ServiceDesc is the grpc.ServiceDesc for RCP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RCP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rcppb.RCP",
	HandlerType: (*RCPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendEntries",
			Handler:    _RCP_AppendEntries_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _RCP_RequestVote_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _RCP_Store_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RCP_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RCP_Get_Handler,
		},
		{
			MethodName: "SetStatus",
			Handler:    _RCP_SetStatus_Handler,
		},
		{
			MethodName: "Partition",
			Handler:    _RCP_Partition_Handler,
		},
		{
			MethodName: "Delay",
			Handler:    _RCP_Delay_Handler,
		},
		{
			MethodName: "DepositChecking",
			Handler:    _RCP_DepositChecking_Handler,
		},
		{
			MethodName: "SendPayment",
			Handler:    _RCP_SendPayment_Handler,
		},
		{
			MethodName: "WriteCheck",
			Handler:    _RCP_WriteCheck_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _RCP_GetBalance_Handler,
		},
		{
			MethodName: "Amalgamate",
			Handler:    _RCP_Amalgamate_Handler,
		},
		{
			MethodName: "TransactSavings",
			Handler:    _RCP_TransactSavings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rcppb/rcp.proto",
}
